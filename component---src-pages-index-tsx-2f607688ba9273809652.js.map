{"version":3,"sources":["webpack:///./src/helpers/colorHelper.ts","webpack:///./src/components/repoCard.tsx","webpack:///./src/components/repoList.tsx","webpack:///./src/components/work.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx"],"names":["pickTextColor","bgColor","lightColor","darkColor","color","charAt","substring","c","parseInt","map","col","Math","pow","getCardClass","language","currentLanguages","baseClass","find","currentLanguage","name","RepoCard","_ref","repo","toggleLanguage","size","react_default","a","createElement","className","languages","edges","node","style","backgroundColor","onClick","key","owner","login","description","href","url","homepageUrl","RepoList","_React$Component","props","_this","call","this","render","getLanguageFilters","active","handleLanguageToggled","getPinnedRepositories","components_repoCard","state","id","getOtherRepositories","setState","filter","concat","_toConsumableArray","_proto","prototype","_this2","allLanguages","pinnedRepositories","allRepositories","forEach","existingLanguage","push","Boolean","Object","assign","sort","b","filterReposByLanguage","_this3","every","pinnedRepo","repositories","_this4","length","some","React","Component","Work","gatsby_browser_entry","query","data","repoList_RepoList","github","repositoryOwner","_3305757413","IndexPage","layout","seo","title","keywords","work","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","StaticQueryContext","createContext","StaticQueryDataRenderer","staticQueryData","finalData","Fragment","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","SEO","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Header","siteTitle","background","marginBottom","margin","to","textDecoration","Layout","components_header","Date","getFullYear","_755544856"],"mappings":"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","file":"component---src-pages-index-tsx-2f607688ba9273809652.js","sourcesContent":["// https://stackoverflow.com/a/41491220/4167438\nexport function pickTextColor(bgColor, lightColor = '#fff', darkColor = '#000') {\n    var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\n    var uicolors = [r / 255, g / 255, b / 255];\n    var c = uicolors.map((col) => {\n      if (col <= 0.03928) {\n        return col / 12.92;\n      }\n      return Math.pow((col + 0.055) / 1.055, 2.4);\n    });\n    var L = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);\n    return (L > 0.179) ? darkColor : lightColor;\n}","import React from \"react\"\n\nimport { Repository, Language } from \"../../generated/githubTypes\";\nimport { pickTextColor } from '../helpers/colorHelper'\n\nimport \"./repoCard.scss\"\n\ninterface RepoCardProps {\n    repo: Repository\n    toggleLanguage: (language: Language) => void\n    size?: 'sm' | 'md'\n    currentLanguages?: Language[]\n}\n\nconst getCardClass = (language: Language, currentLanguages: Language[]) => {\n    const baseClass = 'repo-card__language'\n    const isCurrentLanguage = currentLanguages.find(currentLanguage => currentLanguage.name === language.name)\n    return `${baseClass} ${isCurrentLanguage ? `${baseClass}--active` :  ''}`\n}\n\nconst RepoCard: React.SFC<RepoCardProps> = ({ repo, toggleLanguage, size, currentLanguages }) => (\n    <section className={`repo-card ${size === 'sm' ? 'repo-card--small' : ''}`}>\n        <div className=\"repo-card__language-wrapper\">\n            {repo.languages.edges.map(language => {\n                return (\n                    <span \n                        className={getCardClass(language.node, currentLanguages)}\n                        style={{ \n                            backgroundColor: language.node.color,\n                            color: pickTextColor(language.node.color)\n                        }}\n                        onClick={() => toggleLanguage(language.node)}\n                        key={language.node.name}\n                    >\n                        <span className=\"repo-card__language-text\">{language.node.name}</span>\n                    </span>\n                )}\n            )} \n        </div>\n        <h2 className=\"repo-card__header\">\n            {(repo.owner.login !== 'jackkoppa' \n            ? `@${repo.owner.login}/` \n            : ''\n            ) + repo.name}\n        </h2>\n        <h4 className=\"repo-card__description\">{repo.description}</h4>\n        <a href={repo.url} className=\"repo-card__link\">\n            <span className=\"repo-card__link-text\">GitHub</span>\n            <i className=\"fab fa-github\"></i>\n        </a> \n        {repo.homepageUrl\n            ? <a href={repo.homepageUrl} className=\"repo-card__link\">\n                <span className=\"repo-card__link-text\">View Project</span>\n                <i className=\"far fa-external-link\"></i>\n            </a>\n            : null\n        }\n    </section>\n)\n\nexport default RepoCard\n","import React from 'react';\n\nimport { Repository, RepositoryEdge, Language } from '../../generated/githubTypes';\nimport { pickTextColor } from '../helpers/colorHelper'\n\nimport RepoCard from './repoCard'\nimport './repoList.scss'\n\ninterface RepoListProps {\n    pinnedRepositories: RepositoryEdge[]\n    allRepositories: RepositoryEdge[]\n}\n\ninterface RepoListState {\n    currentLanguages: Language[]\n}\n\ninterface DisplayLanguage extends Language {\n    active: boolean\n}\n\nexport class RepoList extends React.Component<RepoListProps, RepoListState> {\n    constructor(props: RepoListProps) {\n        super(props);\n        this.state = { currentLanguages: [] }\n    }\n\n    public render = () => (\n        <div className=\"repo-list\">\n            {this.getLanguageFilters().map(language => (\n                <span \n                    className={\n                        `repo-list__language-filter ${language.active \n                            ? 'repo-list__language-filter--active'\n                            : ''\n                        }`\n                    }\n                    style={{ \n                        backgroundColor: language.color,\n                        color: pickTextColor(language.color)\n                    }}\n                    onClick={() => this.handleLanguageToggled(language)}\n                    key={language.name}\n                >\n                    <span className=\"repo-list__language-filter-text\">{language.name}</span>\n                    <i className=\"fal fa-times\"></i>\n                </span>\n            ))}\n            <h3 className=\"repo-list__header\">Pinned Projects</h3>\n            {this.getPinnedRepositories().map(repo =>\n                <RepoCard \n                    repo={repo} \n                    toggleLanguage={this.handleLanguageToggled} \n                    currentLanguages={this.state.currentLanguages}\n                    key={repo.id}\n                />\n            )}\n            <h3 className=\"repo-list__header\">Other Projects</h3>\n            {this.getOtherRepositories().map(repo =>\n                <RepoCard \n                    repo={repo} \n                    toggleLanguage={this.handleLanguageToggled} \n                    size=\"sm\" \n                    currentLanguages={this.state.currentLanguages}\n                    key={repo.id}\n                />\n            )}\n        </div>\n    )\n\n    private getLanguageFilters(): DisplayLanguage[] {\n        const allLanguages: Language[] = []\n        this.props.pinnedRepositories.concat(this.props.allRepositories ).forEach(repo => {\n            const languages = repo.node && repo.node.languages && repo.node.languages.edges || []\n            languages.forEach(language => {\n                if (!allLanguages.find(existingLanguage => existingLanguage.name === language.node.name)) {\n                    allLanguages.push(language.node)\n                }\n            })\n        })\n        return allLanguages.map(existingLanguage => {\n            const active = Boolean(this.state.currentLanguages.find(currentLanguage => currentLanguage.name === existingLanguage.name))\n            return { ...existingLanguage, active }\n        }).sort((a, b) => {\n            if (a.active) return -1\n            if (b.active) return 1\n            if (a.name > b.name) return 1\n            if (b.name > a.name) return -1\n            return 0\n        })\n    }\n\n    private getPinnedRepositories(): Repository[] {\n        return this.filterReposByLanguage(this.props.pinnedRepositories)\n    }\n\n    private getOtherRepositories(): Repository[] {\n        return this.filterReposByLanguage(this.props.allRepositories)\n            .filter(repo => \n                this.getPinnedRepositories().every(pinnedRepo => pinnedRepo.id !== repo.id)\n            )\n    }\n    \n    private filterReposByLanguage(repositories: RepositoryEdge[]): Repository[] {\n        return (this.state.currentLanguages.length > 0 \n            ? repositories\n                .filter(repo => (\n                    repo.node.languages.edges.some(language => \n                        this.state.currentLanguages.some(currentLanguage => currentLanguage.name === language.node.name)\n                    )\n                ))\n            : repositories\n            )   \n            .map(repo => repo.node)\n    }\n\n    private handleLanguageToggled = (language: Language) => {\n        const languageExists = this.state.currentLanguages.find(currentLanguage => currentLanguage.name === language.name)\n        if (languageExists) {\n            this.setState({ currentLanguages: this.state.currentLanguages.filter(currentLanguage => currentLanguage.name != language.name) })\n        } else {\n            this.setState({ currentLanguages: [...this.state.currentLanguages, language] })\n        }\n    }\n}\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport { RepoList } from './repoList'\n\nconst Work = () => (\n  <StaticQuery\n    query={graphql`\n        query WorkQuery {\n            github {\n                repositoryOwner(login: \"jackkoppa\") {\n                    pinnedRepositories(first: 6) {\n                        edges {\n                            node {\n                                name\n                                id\n                                url\n                                description\n                                homepageUrl\n                                owner {\n                                    login\n                                }\n                                languages(first: 6) {\n                                    edges {\n                                        size\n                                        node {\n                                            color\n                                            name\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    repositories(first: 20, orderBy: { field: UPDATED_AT, direction: DESC } ) {\n                        edges {\n                            node {\n                                name\n                                id\n                                url\n                                description\n                                homepageUrl\n                                owner {\n                                    login\n                                }\n                                languages(first: 6) {\n                                    edges {\n                                        size\n                                        node {\n                                            color\n                                            name\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `}\n    render={data => (\n        <RepoList \n            pinnedRepositories={data.github.repositoryOwner.pinnedRepositories.edges}\n            allRepositories={data.github.repositoryOwner.repositories.edges}\n        />\n    )}\n/>\n)\n\nexport default Work\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport Work from \"../components/work\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <Work />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\ninterface SEOProps {\n  title: string\n  description?: string\n  lang?: string\n  meta?: any\n  keywords?: string[]\n}\n\nfunction SEO({ title, description, lang, meta, keywords }: SEOProps) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport './header.scss'\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rgb(43, 116, 137)`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div className=\"header-wrapper\">\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.scss\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"layout-wrapper\">\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Jack Koppa\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}