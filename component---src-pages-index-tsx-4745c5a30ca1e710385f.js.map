{"version":3,"sources":["webpack:///./src/helpers/colorHelper.ts","webpack:///./src/components/repoCard.tsx","webpack:///./src/components/repoList.tsx","webpack:///./src/components/work.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["pickTextColor","bgColor","lightColor","darkColor","color","charAt","substring","c","parseInt","map","col","Math","pow","RepoCard","_ref","repo","toggleLanguage","size","react_default","a","createElement","className","languages","edges","language","style","backgroundColor","node","onClick","key","name","owner","login","description","href","url","homepageUrl","RepoList","_React$Component","props","_this","call","this","render","state","currentLanguages","handleLanguageToggled","getPinnedRepositories","components_repoCard","id","getOtherRepositories","indexOf","setState","filter","currentLanguage","concat","inheritsLoose_default","_proto","prototype","filterReposByLanguage","pinnedRepositories","_this2","allRepositories","every","pinnedRepo","repositories","_this3","length","some","React","Component","Work","gatsby_browser_entry","query","data","repoList_RepoList","github","repositoryOwner","_3305757413","IndexPage","layout","seo","title","keywords","work","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","Header","siteTitle","background","marginBottom","margin","to","textDecoration","Layout","Fragment","components_header","Date","getFullYear","_755544856","dP","f","FProto","Function","nameRE","configurable","get","match","e"],"mappings":"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","file":"component---src-pages-index-tsx-4745c5a30ca1e710385f.js","sourcesContent":["// https://stackoverflow.com/a/41491220/4167438\nexport function pickTextColor(bgColor, lightColor = '#fff', darkColor = '#000') {\n    var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\n    var uicolors = [r / 255, g / 255, b / 255];\n    var c = uicolors.map((col) => {\n      if (col <= 0.03928) {\n        return col / 12.92;\n      }\n      return Math.pow((col + 0.055) / 1.055, 2.4);\n    });\n    var L = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);\n    return (L > 0.179) ? darkColor : lightColor;\n}","import React from \"react\"\n\nimport { Repository, Language } from \"../../generated/githubTypes\";\nimport { pickTextColor } from '../helpers/colorHelper'\n\nimport \"./repoCard.scss\"\n\ninterface RepoCardProps {\n    repo: Repository\n    toggleLanguage: (language: Language) => void\n    size?: 'sm' | 'md'\n}\n\nconst RepoCard: React.SFC<RepoCardProps> = ({ repo, toggleLanguage, size }) => (\n    <section className={`repo-card ${size === 'sm' ? 'repo-card--small' : ''}`}>\n        <div className=\"repo-card__language-wrapper\">\n            {repo.languages.edges.map(language => {\n                return (\n                    <span \n                        className=\"repo-card__language\"\n                        style={{ \n                            backgroundColor: language.node.color,\n                            color: pickTextColor(language.node.color)\n                        }}\n                        onClick={() => toggleLanguage(language.node)}\n                        key={language.node.name}\n                    >\n                        <span className=\"repo-card__language-text\">{language.node.name}</span>\n                    </span>\n                )}\n            )} \n        </div>\n        <h2 className=\"repo-card__header\">\n            {(repo.owner.login !== 'jackkoppa' \n            ? `@${repo.owner.login}/` \n            : ''\n            ) + repo.name}\n        </h2>\n        <h4 className=\"repo-card__description\">{repo.description}</h4>\n        <a href={repo.url} className=\"repo-card__link\">\n            <span className=\"repo-card__link-text\">GitHub</span>\n            <i className=\"fab fa-github\"></i>\n        </a> \n        {repo.homepageUrl\n            ? <a href={repo.homepageUrl} className=\"repo-card__link\">\n                <span className=\"repo-card__link-text\">View Project</span>\n                <i className=\"far fa-external-link\"></i>\n            </a>\n            : null\n        }\n    </section>\n)\n\nexport default RepoCard\n","import React from 'react';\n\nimport { Repository, RepositoryEdge, Language } from '../../generated/githubTypes';\nimport { pickTextColor } from '../helpers/colorHelper'\n\nimport RepoCard from './repoCard'\nimport './repoList.scss'\n\ninterface RepoListProps {\n    pinnedRepositories: RepositoryEdge[]\n    allRepositories: RepositoryEdge[]\n}\n\ninterface RepoListState {\n    currentLanguages: Language[]\n}\n\nexport class RepoList extends React.Component<RepoListProps, RepoListState> {\n    constructor(props: RepoListProps) {\n        super(props);\n        this.state = { currentLanguages: [] }\n    }\n\n    public render = () => (\n        <div className=\"repo-list\">\n            {this.state.currentLanguages.map(language => (\n                <span \n                    className=\"repo-list__language-filter\" \n                    style={{ \n                        backgroundColor: language.color,\n                        color: pickTextColor(language.color)\n                    }}\n                    onClick={() => this.handleLanguageToggled(language)}\n                    key={language.name}\n                >\n                    <span className=\"repo-list__language-filter-text\">{language.name}</span>\n                    <i className=\"fal fa-times\"></i>\n                </span>\n            ))}\n            <h3 className=\"repo-list__header\">Pinned Projects</h3>\n            {this.getPinnedRepositories().map(repo =>\n                <RepoCard repo={repo} toggleLanguage={this.handleLanguageToggled} key={repo.id} />\n            )}\n            <h3 className=\"repo-list__header\">Other Projects</h3>\n            {this.getOtherRepositories().map(repo =>\n                <RepoCard repo={repo} toggleLanguage={this.handleLanguageToggled} size=\"sm\" key={repo.id} />\n            )}\n        </div>\n    )\n\n    private getPinnedRepositories(): Repository[] {\n        return this.filterReposByLanguage(this.props.pinnedRepositories)\n    }\n\n    private getOtherRepositories(): Repository[] {\n        return this.filterReposByLanguage(this.props.allRepositories)\n            .filter(repo => \n                this.getPinnedRepositories().every(pinnedRepo => pinnedRepo.id !== repo.id)\n            )\n    }\n    \n    private filterReposByLanguage(repositories: RepositoryEdge[]): Repository[] {\n        return (this.state.currentLanguages.length > 0 \n            ? repositories\n                .filter(repo => (\n                    repo.node.languages.edges.some(language => \n                        this.state.currentLanguages.some(currentLanguage => currentLanguage.name === language.node.name)\n                    )\n                ))\n            : repositories\n            )   \n            .map(repo => repo.node)\n    }\n\n    private handleLanguageToggled = (language: Language) => {\n        const languageIndex = this.state.currentLanguages.indexOf(language)\n        if (languageIndex !== -1) {\n            this.setState({ currentLanguages: this.state.currentLanguages.filter(currentLanguage => currentLanguage != language) })\n        } else {\n            this.setState({ currentLanguages: [...this.state.currentLanguages, language] })\n        }\n    }\n}\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport { RepoList } from './repoList'\n\nconst Work = () => (\n  <StaticQuery\n    query={graphql`\n        query WorkQuery {\n            github {\n                repositoryOwner(login: \"jackkoppa\") {\n                    pinnedRepositories(first: 6) {\n                        edges {\n                            node {\n                                name\n                                id\n                                url\n                                description\n                                homepageUrl\n                                owner {\n                                    login\n                                }\n                                languages(first: 6) {\n                                    edges {\n                                        size\n                                        node {\n                                            color\n                                            name\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    repositories(first: 20, orderBy: { field: UPDATED_AT, direction: DESC } ) {\n                        edges {\n                            node {\n                                name\n                                id\n                                url\n                                description\n                                homepageUrl\n                                owner {\n                                    login\n                                }\n                                languages(first: 6) {\n                                    edges {\n                                        size\n                                        node {\n                                            color\n                                            name\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `}\n    render={data => (\n        <RepoList \n            pinnedRepositories={data.github.repositoryOwner.pinnedRepositories.edges}\n            allRepositories={data.github.repositoryOwner.repositories.edges}\n        />\n    )}\n/>\n)\n\nexport default Work\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport Work from \"../components/work\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <Work />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\ninterface SEOProps {\n  title: string\n  description?: string\n  lang?: string\n  meta?: any\n  keywords?: string[]\n}\n\nfunction SEO({ title, description, lang, meta, keywords }: SEOProps) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport './header.scss'\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rgb(43, 116, 137)`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div className=\"header-wrapper\">\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.scss\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"layout-wrapper\">\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Jack Koppa\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}